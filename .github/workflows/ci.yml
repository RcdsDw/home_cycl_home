name: CI/CD Pipeline

on:
  push:

env:
  NODE_VERSION: 18
  PHP_VERSION: 8.4

jobs:
  lint:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install Frontend Dependencies
        working-directory: ./home_cycl_home_front
        run: npm install

      - name: Run lint (block on warnings)
        working-directory: ./home_cycl_home_front
        run: npm run lint -- --max-warnings=0

      - name: Run prettier check
        working-directory: ./home_cycl_home_front
        run: npm run prettier:check

  test:
    runs-on: ubuntu-latest
    needs: lint 

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ env.PHP_VERSION }}
          extensions: mbstring, xml, ctype, iconv, intl, dom, filter, gd, json
          coverage: none

      - name: Install Frontend Dependencies
        working-directory: ./home_cycl_home_front
        run: npm install

      - name: Install Backend Dependencies
        working-directory: ./home_cycl_home_api_sf
        run: composer install --prefer-dist --no-progress --no-interaction --no-scripts

      - name: Run frontend tests
        working-directory: ./home_cycl_home_front
        run: npm test -- --watchAll=false

      - name: Run backend tests
        working-directory: ./home_cycl_home_api_sf
        run: php bin/phpunit

  deploy:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Add SSH known hosts
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_KNOWN_HOSTS }}" > ~/.ssh/known_hosts

      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Set deployment directory
        run: |
          if [ "${GITHUB_REF}" == "refs/heads/main" ]; then
            echo "DEPLOY_DIR=/home/${{ secrets.VPS_USER }}/home_cycl_home_main" >> $GITHUB_ENV
          else
            echo "DEPLOY_DIR=/home/${{ secrets.VPS_USER }}/home_cycl_home_dev" >> $GITHUB_ENV
          fi

      - name: Update project via Git
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} << EOF
            if [ ! -d "$DEPLOY_DIR/.git" ]; then
              rm -rf "$DEPLOY_DIR"
              git clone git@github.com:${{ github.repository }} "$DEPLOY_DIR"
            else
              cd "$DEPLOY_DIR"
              git fetch origin
              git reset --hard origin/${GITHUB_REF##*/}
            fi
          EOF

      - name: Deploy backend to VPS
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} << EOF          
            cd "$DEPLOY_DIR/home_cycl_home_api_sf"

            mkdir -p "../backups"
            BACKUP_NAME="backup_$(date +%Y%m%d_%H%M%S)"
            rsync -a --exclude='.git' ./ "../backups/$BACKUP_NAME"

            docker compose down
            sudo fuser -k 82/tcp
            docker compose up --build -d --remove-orphans

            sleep 10
            docker compose exec backend php bin/console doctrine:migrations:migrate --no-interaction
          EOF

      - name: Deploy frontend to VPS
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} << 'EOF'
            cd "$DEPLOY_DIR/home_cycl_home_front"
            
            npm install --omit=dev
            npm run build --verbose

            if ! command -v serve &> /dev/null; then
              npm install -g serve
            fi

            if pm2 describe front > /dev/null 2>&1; then
              pm2 restart front
            else
              pm2 start "sh -c 'npx serve -s build -l 4000'" --name front
            fi
          EOF
